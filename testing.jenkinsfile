node('helm2') {
  currentBuild.result = "SUCCESS"
  try {
    stage("checkout"){
      checkout scm
    }
    withCredentials([string(credentialsId: 'kubectl', variable: 'SVC_ACCOUNT_KEY')]) {
          withEnv(['PATH+GCLOUDPATH=/root/google-cloud-sdk/bin','PRODUCT=spike','PROD_VERSION=latest']) {
            
            stage("Authenticate") {
              container("helm2") {
                  sh 'echo $SVC_ACCOUNT_KEY | base64 -d > gcloud-svc-acct.json'
                  sh 'gcloud auth activate-service-account --key-file gcloud-svc-acct.json'
                  sh 'gcloud config set project newswhip-224410'
                  sh 'gcloud auth configure-docker -q'
                  sh 'gcloud container clusters get-credentials gke-prod --zone=us-east4'
              }
            }
            
            stage("Docker pull image and build distributed-jmeter") {
              container("helm2") {
                dir("local"){
                  sh "docker pull gcr.io/newswhip-224410/dis-jmeter:latest"
                  sh "docker run dis-jmeter:latest"
                  sh "docker-compose up -d"
                }
              }
            }
            
            stage("Retrieve tests from cloud") {
              container("helm2") {
                dir("k8s")
                {
                  sh "gsutil cp ${StorageLocation}/${Test} ."
                  if (CSV != '') {
                    sh "gsutil cp ${StorageLocation}/${CSV} ."
                    echo "CSV provided found"
                  }
                }
              }
            }
            
            stage("Copy tests to jmeter and run tests") {
              container("helm2") {
                env.MASTER_NAME = sh(returnStdout: true, script: "kubectl get pods -l app.kubernetes.io/component=master -o jsonpath='{.items[*].metadata.name}'").trim()
                println "Master is ${env.MASTER_NAME}"
                sh "docker cp ${Test} ${env.MASTER_NAME}:/jmeter/apache-jmeter-5.3/bin"
                if (CSV != '') {
                  sh "docker cp ${CSV} ${env.MASTER_NAME}:/jmeter/apache-jmeter-5.3/bin"
                  env.SERVER_NAMES = sh(returnStdout: true, script: "kubectl get pods -l app.kubernetes.io/component=server -o jsonpath='{.items[*].metadata.name}'").trim().replace(" ", ",")
                  println "Servers are ${env.SERVER_NAMES}"
                  def servers = env.SERVER_NAMES.split(",")
                  println "Servers put into array"
                  copyeach(servers, CSV)
                }
                env.SERVER_IPS = sh(returnStdout: true, script: "kubectl get pods -l app.kubernetes.io/component=server -o jsonpath='{.items[*].status.podIP}'").trim().replace(" ", ",")
                println "Servers are ${env.SERVER_IPS}"
                sh "kubectl exec -it ${env.MASTER_NAME} -- jmeter -n -t /jmeter/apache-jmeter-5.3/bin/${Test} -Guser_threads=${UserNum} -Gramp_up=${RampUp} -Giterations=${Iterations} -R ${env.SERVER_IPS} -l /jmeter/jtl/ -e -o /jmeter/html/"
              }
            }
            
            stage("Save Results and Delete the deployment") {
              container("helm2") {
                dir("k8s/helm/ci/dis-jmeter")
                {
                  sh "docker cp ${env.MASTER_NAME}:/jmeter/html/ temp_tests"
                  sh 'zip -r temp_tests.zip temp_tests'
                  sh "gsutil cp -r temp_tests.zip ${StorageLocation}/"
                }
              }
            }
            
            
          }
        }
  } catch (err) {
    currentBuild.result = "FAILURE"
    throw err
  }
}

def copyeach(list, csv){
  list.each { val ->
    sh "docker cp ${csv} ${val}:/jmeter/apache-jmeter-5.3/bin"
  }
}
